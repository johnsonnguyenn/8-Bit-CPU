// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2024 00:14:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_sample_tst(
	A,
	B,
	clock,
	data,
	en,
	reset,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  clock;
input  data;
input  en;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or clock or data or en or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CPU_vlg_check_tst (
	opcode,
	r_first_four,
	r_last_four,
	sign,
	state,
	studentID,
	sampler_rx
);
input [7:0] opcode;
input [0:6] r_first_four;
input [0:6] r_last_four;
input [0:6] sign;
input [2:0] state;
input [0:6] studentID;
input sampler_rx;

reg [7:0] opcode_expected;
reg [0:6] r_first_four_expected;
reg [0:6] r_last_four_expected;
reg [0:6] sign_expected;
reg [2:0] state_expected;
reg [0:6] studentID_expected;

reg [7:0] opcode_prev;
reg [0:6] r_first_four_prev;
reg [0:6] r_last_four_prev;
reg [0:6] sign_prev;
reg [2:0] state_prev;
reg [0:6] studentID_prev;

reg [7:0] opcode_expected_prev;
reg [0:6] r_first_four_expected_prev;
reg [0:6] r_last_four_expected_prev;
reg [0:6] sign_expected_prev;
reg [2:0] state_expected_prev;
reg [0:6] studentID_expected_prev;

reg [7:0] last_opcode_exp;
reg [0:6] last_r_first_four_exp;
reg [0:6] last_r_last_four_exp;
reg [0:6] last_sign_exp;
reg [2:0] last_state_exp;
reg [0:6] last_studentID_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	opcode_prev = opcode;
	r_first_four_prev = r_first_four;
	r_last_four_prev = r_last_four;
	sign_prev = sign;
	state_prev = state;
	studentID_prev = studentID;
end

// update expected /o prevs

always @(trigger)
begin
	opcode_expected_prev = opcode_expected;
	r_first_four_expected_prev = r_first_four_expected;
	r_last_four_expected_prev = r_last_four_expected;
	sign_expected_prev = sign_expected;
	state_expected_prev = state_expected;
	studentID_expected_prev = studentID_expected;
end


// expected r_first_four[ 6 ]
initial
begin
	r_first_four_expected[6] = 1'bX;
end 
// expected r_first_four[ 5 ]
initial
begin
	r_first_four_expected[5] = 1'bX;
end 
// expected r_first_four[ 4 ]
initial
begin
	r_first_four_expected[4] = 1'bX;
end 
// expected r_first_four[ 3 ]
initial
begin
	r_first_four_expected[3] = 1'bX;
end 
// expected r_first_four[ 2 ]
initial
begin
	r_first_four_expected[2] = 1'bX;
end 
// expected r_first_four[ 1 ]
initial
begin
	r_first_four_expected[1] = 1'bX;
end 
// expected r_first_four[ 0 ]
initial
begin
	r_first_four_expected[0] = 1'bX;
end 
// expected r_last_four[ 6 ]
initial
begin
	r_last_four_expected[6] = 1'bX;
end 
// expected r_last_four[ 5 ]
initial
begin
	r_last_four_expected[5] = 1'bX;
end 
// expected r_last_four[ 4 ]
initial
begin
	r_last_four_expected[4] = 1'bX;
end 
// expected r_last_four[ 3 ]
initial
begin
	r_last_four_expected[3] = 1'bX;
end 
// expected r_last_four[ 2 ]
initial
begin
	r_last_four_expected[2] = 1'bX;
end 
// expected r_last_four[ 1 ]
initial
begin
	r_last_four_expected[1] = 1'bX;
end 
// expected r_last_four[ 0 ]
initial
begin
	r_last_four_expected[0] = 1'bX;
end 
// expected sign[ 6 ]
initial
begin
	sign_expected[6] = 1'bX;
end 
// expected sign[ 5 ]
initial
begin
	sign_expected[5] = 1'bX;
end 
// expected sign[ 4 ]
initial
begin
	sign_expected[4] = 1'bX;
end 
// expected sign[ 3 ]
initial
begin
	sign_expected[3] = 1'bX;
end 
// expected sign[ 2 ]
initial
begin
	sign_expected[2] = 1'bX;
end 
// expected sign[ 1 ]
initial
begin
	sign_expected[1] = 1'bX;
end 
// expected sign[ 0 ]
initial
begin
	sign_expected[0] = 1'bX;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// expected studentID[ 6 ]
initial
begin
	studentID_expected[6] = 1'bX;
end 
// expected studentID[ 5 ]
initial
begin
	studentID_expected[5] = 1'bX;
end 
// expected studentID[ 4 ]
initial
begin
	studentID_expected[4] = 1'bX;
end 
// expected studentID[ 3 ]
initial
begin
	studentID_expected[3] = 1'bX;
end 
// expected studentID[ 2 ]
initial
begin
	studentID_expected[2] = 1'bX;
end 
// expected studentID[ 1 ]
initial
begin
	studentID_expected[1] = 1'bX;
end 
// expected studentID[ 0 ]
initial
begin
	studentID_expected[0] = 1'bX;
end 
// expected opcode[ 7 ]
initial
begin
	opcode_expected[7] = 1'bX;
end 
// expected opcode[ 6 ]
initial
begin
	opcode_expected[6] = 1'bX;
end 
// expected opcode[ 5 ]
initial
begin
	opcode_expected[5] = 1'bX;
end 
// expected opcode[ 4 ]
initial
begin
	opcode_expected[4] = 1'bX;
end 
// expected opcode[ 3 ]
initial
begin
	opcode_expected[3] = 1'bX;
end 
// expected opcode[ 2 ]
initial
begin
	opcode_expected[2] = 1'bX;
end 
// expected opcode[ 1 ]
initial
begin
	opcode_expected[1] = 1'bX;
end 
// expected opcode[ 0 ]
initial
begin
	opcode_expected[0] = 1'bX;
end 
// generate trigger
always @(opcode_expected or opcode or r_first_four_expected or r_first_four or r_last_four_expected or r_last_four or sign_expected or sign or state_expected or state or studentID_expected or studentID)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected opcode = %b | expected r_first_four = %b | expected r_last_four = %b | expected sign = %b | expected state = %b | expected studentID = %b | ",opcode_expected_prev,r_first_four_expected_prev,r_last_four_expected_prev,sign_expected_prev,state_expected_prev,studentID_expected_prev);
	$display("| real opcode = %b | real r_first_four = %b | real r_last_four = %b | real sign = %b | real state = %b | real studentID = %b | ",opcode_prev,r_first_four_prev,r_last_four_prev,sign_prev,state_prev,studentID_prev);
`endif
	if (
		( opcode_expected_prev[0] !== 1'bx ) && ( opcode_prev[0] !== opcode_expected_prev[0] )
		&& ((opcode_expected_prev[0] !== last_opcode_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opcode_exp[0] = opcode_expected_prev[0];
	end
	if (
		( opcode_expected_prev[1] !== 1'bx ) && ( opcode_prev[1] !== opcode_expected_prev[1] )
		&& ((opcode_expected_prev[1] !== last_opcode_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opcode_exp[1] = opcode_expected_prev[1];
	end
	if (
		( opcode_expected_prev[2] !== 1'bx ) && ( opcode_prev[2] !== opcode_expected_prev[2] )
		&& ((opcode_expected_prev[2] !== last_opcode_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opcode_exp[2] = opcode_expected_prev[2];
	end
	if (
		( opcode_expected_prev[3] !== 1'bx ) && ( opcode_prev[3] !== opcode_expected_prev[3] )
		&& ((opcode_expected_prev[3] !== last_opcode_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opcode_exp[3] = opcode_expected_prev[3];
	end
	if (
		( opcode_expected_prev[4] !== 1'bx ) && ( opcode_prev[4] !== opcode_expected_prev[4] )
		&& ((opcode_expected_prev[4] !== last_opcode_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opcode_exp[4] = opcode_expected_prev[4];
	end
	if (
		( opcode_expected_prev[5] !== 1'bx ) && ( opcode_prev[5] !== opcode_expected_prev[5] )
		&& ((opcode_expected_prev[5] !== last_opcode_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opcode_exp[5] = opcode_expected_prev[5];
	end
	if (
		( opcode_expected_prev[6] !== 1'bx ) && ( opcode_prev[6] !== opcode_expected_prev[6] )
		&& ((opcode_expected_prev[6] !== last_opcode_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opcode_exp[6] = opcode_expected_prev[6];
	end
	if (
		( opcode_expected_prev[7] !== 1'bx ) && ( opcode_prev[7] !== opcode_expected_prev[7] )
		&& ((opcode_expected_prev[7] !== last_opcode_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opcode_exp[7] = opcode_expected_prev[7];
	end
	if (
		( r_first_four_expected_prev[0] !== 1'bx ) && ( r_first_four_prev[0] !== r_first_four_expected_prev[0] )
		&& ((r_first_four_expected_prev[0] !== last_r_first_four_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_first_four[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_first_four_expected_prev);
		$display ("     Real value = %b", r_first_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r_first_four_exp[0] = r_first_four_expected_prev[0];
	end
	if (
		( r_first_four_expected_prev[1] !== 1'bx ) && ( r_first_four_prev[1] !== r_first_four_expected_prev[1] )
		&& ((r_first_four_expected_prev[1] !== last_r_first_four_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_first_four[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_first_four_expected_prev);
		$display ("     Real value = %b", r_first_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r_first_four_exp[1] = r_first_four_expected_prev[1];
	end
	if (
		( r_first_four_expected_prev[2] !== 1'bx ) && ( r_first_four_prev[2] !== r_first_four_expected_prev[2] )
		&& ((r_first_four_expected_prev[2] !== last_r_first_four_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_first_four[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_first_four_expected_prev);
		$display ("     Real value = %b", r_first_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r_first_four_exp[2] = r_first_four_expected_prev[2];
	end
	if (
		( r_first_four_expected_prev[3] !== 1'bx ) && ( r_first_four_prev[3] !== r_first_four_expected_prev[3] )
		&& ((r_first_four_expected_prev[3] !== last_r_first_four_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_first_four[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_first_four_expected_prev);
		$display ("     Real value = %b", r_first_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r_first_four_exp[3] = r_first_four_expected_prev[3];
	end
	if (
		( r_first_four_expected_prev[4] !== 1'bx ) && ( r_first_four_prev[4] !== r_first_four_expected_prev[4] )
		&& ((r_first_four_expected_prev[4] !== last_r_first_four_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_first_four[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_first_four_expected_prev);
		$display ("     Real value = %b", r_first_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r_first_four_exp[4] = r_first_four_expected_prev[4];
	end
	if (
		( r_first_four_expected_prev[5] !== 1'bx ) && ( r_first_four_prev[5] !== r_first_four_expected_prev[5] )
		&& ((r_first_four_expected_prev[5] !== last_r_first_four_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_first_four[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_first_four_expected_prev);
		$display ("     Real value = %b", r_first_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r_first_four_exp[5] = r_first_four_expected_prev[5];
	end
	if (
		( r_first_four_expected_prev[6] !== 1'bx ) && ( r_first_four_prev[6] !== r_first_four_expected_prev[6] )
		&& ((r_first_four_expected_prev[6] !== last_r_first_four_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_first_four[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_first_four_expected_prev);
		$display ("     Real value = %b", r_first_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r_first_four_exp[6] = r_first_four_expected_prev[6];
	end
	if (
		( r_last_four_expected_prev[0] !== 1'bx ) && ( r_last_four_prev[0] !== r_last_four_expected_prev[0] )
		&& ((r_last_four_expected_prev[0] !== last_r_last_four_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_last_four[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_last_four_expected_prev);
		$display ("     Real value = %b", r_last_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r_last_four_exp[0] = r_last_four_expected_prev[0];
	end
	if (
		( r_last_four_expected_prev[1] !== 1'bx ) && ( r_last_four_prev[1] !== r_last_four_expected_prev[1] )
		&& ((r_last_four_expected_prev[1] !== last_r_last_four_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_last_four[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_last_four_expected_prev);
		$display ("     Real value = %b", r_last_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r_last_four_exp[1] = r_last_four_expected_prev[1];
	end
	if (
		( r_last_four_expected_prev[2] !== 1'bx ) && ( r_last_four_prev[2] !== r_last_four_expected_prev[2] )
		&& ((r_last_four_expected_prev[2] !== last_r_last_four_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_last_four[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_last_four_expected_prev);
		$display ("     Real value = %b", r_last_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r_last_four_exp[2] = r_last_four_expected_prev[2];
	end
	if (
		( r_last_four_expected_prev[3] !== 1'bx ) && ( r_last_four_prev[3] !== r_last_four_expected_prev[3] )
		&& ((r_last_four_expected_prev[3] !== last_r_last_four_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_last_four[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_last_four_expected_prev);
		$display ("     Real value = %b", r_last_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r_last_four_exp[3] = r_last_four_expected_prev[3];
	end
	if (
		( r_last_four_expected_prev[4] !== 1'bx ) && ( r_last_four_prev[4] !== r_last_four_expected_prev[4] )
		&& ((r_last_four_expected_prev[4] !== last_r_last_four_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_last_four[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_last_four_expected_prev);
		$display ("     Real value = %b", r_last_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r_last_four_exp[4] = r_last_four_expected_prev[4];
	end
	if (
		( r_last_four_expected_prev[5] !== 1'bx ) && ( r_last_four_prev[5] !== r_last_four_expected_prev[5] )
		&& ((r_last_four_expected_prev[5] !== last_r_last_four_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_last_four[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_last_four_expected_prev);
		$display ("     Real value = %b", r_last_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r_last_four_exp[5] = r_last_four_expected_prev[5];
	end
	if (
		( r_last_four_expected_prev[6] !== 1'bx ) && ( r_last_four_prev[6] !== r_last_four_expected_prev[6] )
		&& ((r_last_four_expected_prev[6] !== last_r_last_four_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_last_four[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_last_four_expected_prev);
		$display ("     Real value = %b", r_last_four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r_last_four_exp[6] = r_last_four_expected_prev[6];
	end
	if (
		( sign_expected_prev[0] !== 1'bx ) && ( sign_prev[0] !== sign_expected_prev[0] )
		&& ((sign_expected_prev[0] !== last_sign_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sign_exp[0] = sign_expected_prev[0];
	end
	if (
		( sign_expected_prev[1] !== 1'bx ) && ( sign_prev[1] !== sign_expected_prev[1] )
		&& ((sign_expected_prev[1] !== last_sign_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sign_exp[1] = sign_expected_prev[1];
	end
	if (
		( sign_expected_prev[2] !== 1'bx ) && ( sign_prev[2] !== sign_expected_prev[2] )
		&& ((sign_expected_prev[2] !== last_sign_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sign_exp[2] = sign_expected_prev[2];
	end
	if (
		( sign_expected_prev[3] !== 1'bx ) && ( sign_prev[3] !== sign_expected_prev[3] )
		&& ((sign_expected_prev[3] !== last_sign_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sign_exp[3] = sign_expected_prev[3];
	end
	if (
		( sign_expected_prev[4] !== 1'bx ) && ( sign_prev[4] !== sign_expected_prev[4] )
		&& ((sign_expected_prev[4] !== last_sign_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sign_exp[4] = sign_expected_prev[4];
	end
	if (
		( sign_expected_prev[5] !== 1'bx ) && ( sign_prev[5] !== sign_expected_prev[5] )
		&& ((sign_expected_prev[5] !== last_sign_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sign_exp[5] = sign_expected_prev[5];
	end
	if (
		( sign_expected_prev[6] !== 1'bx ) && ( sign_prev[6] !== sign_expected_prev[6] )
		&& ((sign_expected_prev[6] !== last_sign_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sign_exp[6] = sign_expected_prev[6];
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end
	if (
		( studentID_expected_prev[0] !== 1'bx ) && ( studentID_prev[0] !== studentID_expected_prev[0] )
		&& ((studentID_expected_prev[0] !== last_studentID_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentID[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentID_expected_prev);
		$display ("     Real value = %b", studentID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_studentID_exp[0] = studentID_expected_prev[0];
	end
	if (
		( studentID_expected_prev[1] !== 1'bx ) && ( studentID_prev[1] !== studentID_expected_prev[1] )
		&& ((studentID_expected_prev[1] !== last_studentID_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentID[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentID_expected_prev);
		$display ("     Real value = %b", studentID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_studentID_exp[1] = studentID_expected_prev[1];
	end
	if (
		( studentID_expected_prev[2] !== 1'bx ) && ( studentID_prev[2] !== studentID_expected_prev[2] )
		&& ((studentID_expected_prev[2] !== last_studentID_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentID[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentID_expected_prev);
		$display ("     Real value = %b", studentID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_studentID_exp[2] = studentID_expected_prev[2];
	end
	if (
		( studentID_expected_prev[3] !== 1'bx ) && ( studentID_prev[3] !== studentID_expected_prev[3] )
		&& ((studentID_expected_prev[3] !== last_studentID_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentID[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentID_expected_prev);
		$display ("     Real value = %b", studentID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_studentID_exp[3] = studentID_expected_prev[3];
	end
	if (
		( studentID_expected_prev[4] !== 1'bx ) && ( studentID_prev[4] !== studentID_expected_prev[4] )
		&& ((studentID_expected_prev[4] !== last_studentID_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentID[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentID_expected_prev);
		$display ("     Real value = %b", studentID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_studentID_exp[4] = studentID_expected_prev[4];
	end
	if (
		( studentID_expected_prev[5] !== 1'bx ) && ( studentID_prev[5] !== studentID_expected_prev[5] )
		&& ((studentID_expected_prev[5] !== last_studentID_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentID[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentID_expected_prev);
		$display ("     Real value = %b", studentID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_studentID_exp[5] = studentID_expected_prev[5];
	end
	if (
		( studentID_expected_prev[6] !== 1'bx ) && ( studentID_prev[6] !== studentID_expected_prev[6] )
		&& ((studentID_expected_prev[6] !== last_studentID_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentID[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentID_expected_prev);
		$display ("     Real value = %b", studentID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_studentID_exp[6] = studentID_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg clock;
reg data;
reg en;
reg reset;
// wires                                               
wire [7:0] opcode;
wire [0:6] r_first_four;
wire [0:6] r_last_four;
wire [0:6] sign;
wire [2:0] state;
wire [0:6] studentID;

wire sampler;                             

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.clock(clock),
	.data(data),
	.en(en),
	.opcode(opcode),
	.r_first_four(r_first_four),
	.r_last_four(r_last_four),
	.reset(reset),
	.sign(sign),
	.state(state),
	.studentID(studentID)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// data
initial
begin
	data = 1'b1;
end 

// en
initial
begin
	en = 1'b1;
end 

// reset
initial
begin
	reset = 1'b1;
end 

CPU_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.clock(clock),
	.data(data),
	.en(en),
	.reset(reset),
	.sampler_tx(sampler)
);

CPU_vlg_check_tst tb_out(
	.opcode(opcode),
	.r_first_four(r_first_four),
	.r_last_four(r_last_four),
	.sign(sign),
	.state(state),
	.studentID(studentID),
	.sampler_rx(sampler)
);
endmodule

